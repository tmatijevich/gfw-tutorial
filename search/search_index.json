{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This tutorial aims to provide an in-depth overview of the version control software Git. It contains a brief introduction to version control systems, a thorough walk-through of the installation and setup, as well as Git command examples and troubleshooting tips. By completing this tutorial, you should have a strong understanding of the fundamentals of Git and how to collaborate with team members on software development projects. Note: This tutorial follows installation and examples on the Windows platform. When using Git on Windows, the actual software is called Git for Windows ( forked from Git and maintained by the community & project lead). Table of Contents Background What is Git? Git Mechanisms Installation Overview Install Notepad++ Install PuTTY Install Git Install TortoiseGit","title":"Home"},{"location":"#introduction","text":"This tutorial aims to provide an in-depth overview of the version control software Git. It contains a brief introduction to version control systems, a thorough walk-through of the installation and setup, as well as Git command examples and troubleshooting tips. By completing this tutorial, you should have a strong understanding of the fundamentals of Git and how to collaborate with team members on software development projects. Note: This tutorial follows installation and examples on the Windows platform. When using Git on Windows, the actual software is called Git for Windows ( forked from Git and maintained by the community & project lead).","title":"Introduction"},{"location":"#table-of-contents","text":"Background What is Git? Git Mechanisms Installation Overview Install Notepad++ Install PuTTY Install Git Install TortoiseGit","title":"Table of Contents"},{"location":"background/","text":"What is Git? What is Version Control? Version Control is a file tracking system with the following functionality. Co-Development Multiple developers modify project files simultaneously and independently Each developer has their own instance of the project files Synchronization All modifications amongst developers are merged and any potential conflicts are resolved Revision History Modifications to project files by any developer are logged and time-stamped The History of Git Began in 2005 Linus Torvalds & the Linux community Goals Free and open-source Speed Simple Non-linear development Fully distributed Windows You are using \"Git for Windows\" Windows Vista and newer git-scm.com git-scm.com/docs git-scm.com/book/en/v2 git-scm.com/downloads/guis gitforwindows.org GitHub Wiki GitHub FAQ Terminology Git Available 3-letter word amongst Unix commands Global Information Tracker (not really) VCS V ersion C ontrol S ystem DVCS - Distributed Version Control System SCM S oftware C onfiguration M anagement Software Change Management Source Code Management Supply Chain Management You pick one! SVN Subversion (Apache) - A Centralized Version Control System CVS Concurrent Versions System - A Centralized Version Control System TFS Team Foundation Server (Microsoft) - A Centralized Version Control System Now called Azure DevOps Server with Git repositories available The Evolution of Version Control Generation Network Content Operations Synchronization Example Software First None Single file Locks RCS, SCCS Second Centralized File trees Update before commit CVS, SVN, Visual SourceSafe, TFS Third Distributed Changesets Commit before merge Git, Mercurial, BitKeeper, Bazaar See Eric Sink's History of Version Control . Version Control Repository Definitions File System Files, directories, size, type, date Repository Snapshots of a file system over time File tree Store complete files from each snapshot Changeset Store files changes between each snapshot Git Mechanisms Distributed vs. Centralized (Git vs. SVN) Git - DVCS Fully distributed, parallel programming Local repository for offline development Good large project performance SVN - Centralized VCS Straightforward commands Rigid history Good large file performance See Michael Ernst's Version Control Concepts and Best Practices Mechanism Definitions There are five mechanisms that complete the full functionality of Git's version control Three mechanisms ( Workspace , Local , and Remote ) are required for fundamental Git commands The remaining two mechanisms ( Stash and Index ) prove useful in many scenarios, though can be dismissed when performing basic commands Basic Commands Here's a look at some fundamental Git commands across the five Git mechanisms. See Andrew Peterson's Visual Git Cheatsheet","title":"Background"},{"location":"background/#what-is-git","text":"","title":"What is Git?"},{"location":"background/#what-is-version-control","text":"Version Control is a file tracking system with the following functionality. Co-Development Multiple developers modify project files simultaneously and independently Each developer has their own instance of the project files Synchronization All modifications amongst developers are merged and any potential conflicts are resolved Revision History Modifications to project files by any developer are logged and time-stamped","title":"What is Version Control?"},{"location":"background/#the-history-of-git","text":"Began in 2005 Linus Torvalds & the Linux community Goals Free and open-source Speed Simple Non-linear development Fully distributed Windows You are using \"Git for Windows\" Windows Vista and newer git-scm.com git-scm.com/docs git-scm.com/book/en/v2 git-scm.com/downloads/guis gitforwindows.org GitHub Wiki GitHub FAQ","title":"The History of Git"},{"location":"background/#terminology","text":"Git Available 3-letter word amongst Unix commands Global Information Tracker (not really) VCS V ersion C ontrol S ystem DVCS - Distributed Version Control System SCM S oftware C onfiguration M anagement Software Change Management Source Code Management Supply Chain Management You pick one! SVN Subversion (Apache) - A Centralized Version Control System CVS Concurrent Versions System - A Centralized Version Control System TFS Team Foundation Server (Microsoft) - A Centralized Version Control System Now called Azure DevOps Server with Git repositories available","title":"Terminology"},{"location":"background/#the-evolution-of-version-control","text":"Generation Network Content Operations Synchronization Example Software First None Single file Locks RCS, SCCS Second Centralized File trees Update before commit CVS, SVN, Visual SourceSafe, TFS Third Distributed Changesets Commit before merge Git, Mercurial, BitKeeper, Bazaar See Eric Sink's History of Version Control .","title":"The Evolution of Version Control"},{"location":"background/#version-control-repository-definitions","text":"File System Files, directories, size, type, date Repository Snapshots of a file system over time File tree Store complete files from each snapshot Changeset Store files changes between each snapshot","title":"Version Control Repository Definitions"},{"location":"background/#git-mechanisms","text":"","title":"Git Mechanisms"},{"location":"background/#distributed-vs-centralized-git-vs-svn","text":"","title":"Distributed vs. Centralized (Git vs. SVN)"},{"location":"background/#git-dvcs","text":"Fully distributed, parallel programming Local repository for offline development Good large project performance","title":"Git - DVCS"},{"location":"background/#svn-centralized-vcs","text":"Straightforward commands Rigid history Good large file performance See Michael Ernst's Version Control Concepts and Best Practices","title":"SVN - Centralized VCS"},{"location":"background/#mechanism-definitions","text":"There are five mechanisms that complete the full functionality of Git's version control Three mechanisms ( Workspace , Local , and Remote ) are required for fundamental Git commands The remaining two mechanisms ( Stash and Index ) prove useful in many scenarios, though can be dismissed when performing basic commands","title":"Mechanism Definitions"},{"location":"background/#basic-commands","text":"Here's a look at some fundamental Git commands across the five Git mechanisms. See Andrew Peterson's Visual Git Cheatsheet","title":"Basic Commands"},{"location":"installation/","text":"Overview This section provides installation details on the recommended software to start using Git for Windows. As the bare minimum , you will need Git. An installer is available on Git's official website. git-scm.com/downloads The web page should automatically recognize you are using Windows, so simply click the link Download for Windows to get the latest stable version. The Git for Windows installation provides: Use of the git command from the Windows Command Prompt Git-Bash - A shell terminal on Windows Git-GUI - A simple GUI for repositories OpenSSH - Secure Shell Protocol utility OpenSSL - Library for secure communications with HTTPS websites More details on the actual installation to follow. It is recommended to additionally download the follow free software to use with Git for Windows. A text editor Notepad++ Atom - Also has a Git client integration Sublime Text Microsoft VSCode A SSH Client PuTTY - A user friendly SSH client for Windows A Git GUI client TortoiseGit Sourcetree GitHub Desktop Sublime Merge GitKraken Install Notepad++ Notepad++ is a fast and lightweight text editor for Windows, useful for editing source code and configuration files. It is free to download from the official website https://notepad-plus-plus.org/ . Find the latest version (32 or 64 bit) and download the installer. Installing Notepad++ before Git will allow you to reference the existing Notepad++ installation during the Git installation. Run the installer and accept User Account Control. 0. Language 1. Welcome 2. License Agreement 3. Install Location 4. Components The default component selections are sufficient Make sure Context Menu Entry is selected (default) This helps for quick edits of text files 5. Options 6. Finish Install PuTTY PuTTY is a client program for the SSH (Secure Shell) protocol. It will be used to communicate file changes to repositories on a server. It is free, open source, and available to download for Windows and Unix systems at the author's website or ssh.com . The PuTTY installation will be referenced during the Git installation process. Download the 32 or 64 bit installer, then run the installer with the default options. 1. Welcome 2. Destination Folder 3. Feature Options Keep Put install directory on the PATH ... selected (default) This will add C:\\Program Files\\PuTTY to your Windows PATH allowing other programs to find it Use this command to view all current directories in your PATH with cmd (Credit Groosha at Stack Overflow ) > echo %path:;=&echo.% 4. Complete Install Git With Notepad++ and PuTTY installed, it is now a good time to install Git. If installed out of order, that is fine, you can still make changes to Git's configuration after installation. Installation Options The default Git installation options will work fine on Windows, but there are a few recommended alternative options that align with the remaining material in the tutorial. These alternative options can also be implemented after installation. Already Installed? If you already have Git installed, you can still run the latest installer. This will effectively update your current installation of Git. The installation options will populate based on your current Git configuration and you can modify them during the update installation. Download and Install Download the 32 or 64 bit version of Git from the official website git-scm.com and run the installer. Steps marked Configurable can be configured post-installation. 1. Information 2. Destination Location 3. Select Components The default component selections (shown) are sufficient It is recommended to keep the Git Bash Here Windows Explorer integration checked for quick access to bash commands 4. Start Menu 5. Text Editor Configurable The default selection is Vim only for historical reasons It is recommended to use the already installed and user-friendly Notepad++ text editor This default editor is launched when running git commit without a message argument, prompting for a message 6. PATH Environment The default recommended selection is the best option This option only adds the necessary entries to PATH allowing Git commands from: Windows Command Prompt (cmd) Windows Powershell Git Bash Unix commands will only be available from Git Bash with this option 7. SSH Agent Configurable Git ships with OpenSSH (default) as the Secure Shell (SSH) protocol client. However, all of OpenSSH's tools are command line execution only. This can be difficult for new users. PuTTY has a suite of user-friendly graphical interface applications to perform SSH client operations. This step of the installation is looking for the executable of a remote connection tool. Plink (PuTTY Link) can be found from any of the following installations: C:\\Program Files\\PuTTY\\Plink.exe - Already installed above C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitPlink.exe C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe 8. SSL Backend Configurable The default selection is suitable for most cases, especially when using SSH to connect with remote servers instead of HTTPS . 9. File Checkout Configurable On checkout, Git will convert unix-style line endings (line feed LF) to windows-style line endings (carriage return CR line feed LF) for text-based files. During a commit, the inverse is performed. This is the recommended option for Windows compatibility. 10. Terminal To avoid complications (ASC-II, scroll-back) with the Windows Command Prompt, it is recommended to use MinTTY (default) as the terminal emulator for Git Bash. 11. Extra Options Configurable Each option can be enabled or disabled post-installation. The Git Credential Manager (stores HTTPS connection usernames and passwords) is unnecessary when utilizing SSH for remote connections. 12. Complete Git has now successfully been installed on your computer. Install TortoiseGit TortoiseGit is a free and open source Windows software to interface with Git. Specifically, TortoiseGit is a lightweight Windows Shell Interface to Git making it very easy to use with all commands directly available from the Windows Explorer. It is based on the TortoiseSVN interface for Apache's Subversion version control system. Additionally, TortoiseGit provides helpful tools for file comparison and merging. It works independently of all IDE (Integrated Development Environment) applications TortoiseGit is available for download on its official website Download and run the latest stable installer for your 32 or 64 bit system. 1. Welcome 2. Information 3. SSH Client TortoiseGitPlink is TortoiseGit's adoption of PuTTY 's Plink. You may use TortoiseGitPlink.exe or Plink.exe for Git operations. However, PuTTY provides additional tools for SSH connections which prove useful for many scenarios. 4. Custom Setup All subfeatures are selected by default and take up little space. 5. Ready to Install 6. Complete Once installed, TortoiseGit prompts the user to run the First Start Wizard. This is highly recommended to complete the setup of TortoiseGit before usage. Steps marked Configurable can be configured post-installation. 1. Language 2. Details 3. Git Path 4. User Configuration Configurable Git's user configuration will be setup in the next page so the reader can see how to set, modify, and unset the user name and email in the Git configuration. 5. Authentication and Credential Store Configurable Similar to the Git installation, the credential store is unnecessary since it is recommended to use SSH for all remote connections. Selecting a credential helper will not interfere with any SSH setup. The credential helper configuration can be change at any time.","title":"Installation"},{"location":"installation/#overview","text":"This section provides installation details on the recommended software to start using Git for Windows. As the bare minimum , you will need Git. An installer is available on Git's official website. git-scm.com/downloads The web page should automatically recognize you are using Windows, so simply click the link Download for Windows to get the latest stable version. The Git for Windows installation provides: Use of the git command from the Windows Command Prompt Git-Bash - A shell terminal on Windows Git-GUI - A simple GUI for repositories OpenSSH - Secure Shell Protocol utility OpenSSL - Library for secure communications with HTTPS websites More details on the actual installation to follow. It is recommended to additionally download the follow free software to use with Git for Windows. A text editor Notepad++ Atom - Also has a Git client integration Sublime Text Microsoft VSCode A SSH Client PuTTY - A user friendly SSH client for Windows A Git GUI client TortoiseGit Sourcetree GitHub Desktop Sublime Merge GitKraken","title":"Overview"},{"location":"installation/#install-notepad","text":"Notepad++ is a fast and lightweight text editor for Windows, useful for editing source code and configuration files. It is free to download from the official website https://notepad-plus-plus.org/ . Find the latest version (32 or 64 bit) and download the installer. Installing Notepad++ before Git will allow you to reference the existing Notepad++ installation during the Git installation. Run the installer and accept User Account Control.","title":"Install Notepad++"},{"location":"installation/#0-language","text":"","title":"0. Language"},{"location":"installation/#1-welcome","text":"","title":"1. Welcome"},{"location":"installation/#2-license-agreement","text":"","title":"2. License Agreement"},{"location":"installation/#3-install-location","text":"","title":"3. Install Location"},{"location":"installation/#4-components","text":"The default component selections are sufficient Make sure Context Menu Entry is selected (default) This helps for quick edits of text files","title":"4. Components"},{"location":"installation/#5-options","text":"","title":"5. Options"},{"location":"installation/#6-finish","text":"","title":"6. Finish"},{"location":"installation/#install-putty","text":"PuTTY is a client program for the SSH (Secure Shell) protocol. It will be used to communicate file changes to repositories on a server. It is free, open source, and available to download for Windows and Unix systems at the author's website or ssh.com . The PuTTY installation will be referenced during the Git installation process. Download the 32 or 64 bit installer, then run the installer with the default options.","title":"Install PuTTY"},{"location":"installation/#1-welcome_1","text":"","title":"1. Welcome"},{"location":"installation/#2-destination-folder","text":"","title":"2. Destination Folder"},{"location":"installation/#3-feature-options","text":"Keep Put install directory on the PATH ... selected (default) This will add C:\\Program Files\\PuTTY to your Windows PATH allowing other programs to find it Use this command to view all current directories in your PATH with cmd (Credit Groosha at Stack Overflow ) > echo %path:;=&echo.%","title":"3. Feature Options"},{"location":"installation/#4-complete","text":"","title":"4. Complete"},{"location":"installation/#install-git","text":"With Notepad++ and PuTTY installed, it is now a good time to install Git. If installed out of order, that is fine, you can still make changes to Git's configuration after installation.","title":"Install Git"},{"location":"installation/#installation-options","text":"The default Git installation options will work fine on Windows, but there are a few recommended alternative options that align with the remaining material in the tutorial. These alternative options can also be implemented after installation.","title":"Installation Options"},{"location":"installation/#already-installed","text":"If you already have Git installed, you can still run the latest installer. This will effectively update your current installation of Git. The installation options will populate based on your current Git configuration and you can modify them during the update installation.","title":"Already Installed?"},{"location":"installation/#download-and-install","text":"Download the 32 or 64 bit version of Git from the official website git-scm.com and run the installer. Steps marked Configurable can be configured post-installation.","title":"Download and Install"},{"location":"installation/#1-information","text":"","title":"1. Information"},{"location":"installation/#2-destination-location","text":"","title":"2. Destination Location"},{"location":"installation/#3-select-components","text":"The default component selections (shown) are sufficient It is recommended to keep the Git Bash Here Windows Explorer integration checked for quick access to bash commands","title":"3. Select Components"},{"location":"installation/#4-start-menu","text":"","title":"4. Start Menu"},{"location":"installation/#5-text-editor-configurable","text":"The default selection is Vim only for historical reasons It is recommended to use the already installed and user-friendly Notepad++ text editor This default editor is launched when running git commit without a message argument, prompting for a message","title":"5. Text Editor Configurable"},{"location":"installation/#6-path-environment","text":"The default recommended selection is the best option This option only adds the necessary entries to PATH allowing Git commands from: Windows Command Prompt (cmd) Windows Powershell Git Bash Unix commands will only be available from Git Bash with this option","title":"6. PATH Environment"},{"location":"installation/#7-ssh-agent-configurable","text":"Git ships with OpenSSH (default) as the Secure Shell (SSH) protocol client. However, all of OpenSSH's tools are command line execution only. This can be difficult for new users. PuTTY has a suite of user-friendly graphical interface applications to perform SSH client operations. This step of the installation is looking for the executable of a remote connection tool. Plink (PuTTY Link) can be found from any of the following installations: C:\\Program Files\\PuTTY\\Plink.exe - Already installed above C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitPlink.exe C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe","title":"7. SSH Agent Configurable"},{"location":"installation/#8-ssl-backend-configurable","text":"The default selection is suitable for most cases, especially when using SSH to connect with remote servers instead of HTTPS .","title":"8. SSL Backend Configurable"},{"location":"installation/#9-file-checkout-configurable","text":"On checkout, Git will convert unix-style line endings (line feed LF) to windows-style line endings (carriage return CR line feed LF) for text-based files. During a commit, the inverse is performed. This is the recommended option for Windows compatibility.","title":"9. File Checkout Configurable"},{"location":"installation/#10-terminal","text":"To avoid complications (ASC-II, scroll-back) with the Windows Command Prompt, it is recommended to use MinTTY (default) as the terminal emulator for Git Bash.","title":"10. Terminal"},{"location":"installation/#11-extra-options-configurable","text":"Each option can be enabled or disabled post-installation. The Git Credential Manager (stores HTTPS connection usernames and passwords) is unnecessary when utilizing SSH for remote connections.","title":"11. Extra Options Configurable"},{"location":"installation/#12-complete","text":"Git has now successfully been installed on your computer.","title":"12. Complete"},{"location":"installation/#install-tortoisegit","text":"TortoiseGit is a free and open source Windows software to interface with Git. Specifically, TortoiseGit is a lightweight Windows Shell Interface to Git making it very easy to use with all commands directly available from the Windows Explorer. It is based on the TortoiseSVN interface for Apache's Subversion version control system. Additionally, TortoiseGit provides helpful tools for file comparison and merging. It works independently of all IDE (Integrated Development Environment) applications TortoiseGit is available for download on its official website Download and run the latest stable installer for your 32 or 64 bit system.","title":"Install TortoiseGit"},{"location":"installation/#1-welcome_2","text":"","title":"1. Welcome"},{"location":"installation/#2-information","text":"","title":"2. Information"},{"location":"installation/#3-ssh-client","text":"TortoiseGitPlink is TortoiseGit's adoption of PuTTY 's Plink. You may use TortoiseGitPlink.exe or Plink.exe for Git operations. However, PuTTY provides additional tools for SSH connections which prove useful for many scenarios.","title":"3. SSH Client"},{"location":"installation/#4-custom-setup","text":"All subfeatures are selected by default and take up little space.","title":"4. Custom Setup"},{"location":"installation/#5-ready-to-install","text":"","title":"5. Ready to Install"},{"location":"installation/#6-complete","text":"Once installed, TortoiseGit prompts the user to run the First Start Wizard. This is highly recommended to complete the setup of TortoiseGit before usage. Steps marked Configurable can be configured post-installation.","title":"6. Complete"},{"location":"installation/#1-language","text":"","title":"1. Language"},{"location":"installation/#2-details","text":"","title":"2. Details"},{"location":"installation/#3-git-path","text":"","title":"3. Git Path"},{"location":"installation/#4-user-configuration-configurable","text":"Git's user configuration will be setup in the next page so the reader can see how to set, modify, and unset the user name and email in the Git configuration.","title":"4. User Configuration Configurable"},{"location":"installation/#5-authentication-and-credential-store-configurable","text":"Similar to the Git installation, the credential store is unnecessary since it is recommended to use SSH for all remote connections. Selecting a credential helper will not interfere with any SSH setup. The credential helper configuration can be change at any time.","title":"5. Authentication and Credential Store Configurable"}]}